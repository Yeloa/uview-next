// 全局数据存储
var refreshStates = {};

// 获取组件数据
function getRefreshState(ins) {
	var swiper = ins.selectComponent('#swiper');
	var dataset = swiper.getDataset();
	var componentId = dataset.componentid || 'default';
	
	if (!refreshStates[componentId]) {
		refreshStates[componentId] = {
			startY: 0,
			refreshStatus: 1,
			refreshShow: false,
			readyRefresh: false,
			refreshDistance: 90,
			currentReadyRefresh: true
		}
	}
	
	return refreshStates[componentId];
}

// 触摸开始
var touchstart = function(e, ins) {
	var state = getRefreshState(ins);
	state.startY = e.touches[0].pageY;
	
	// 重置过渡动画
	if (state.refreshStatus === 1) {
		var refreshContainer = ins.selectComponent('#refresh-container');
		refreshContainer.setStyle({
			'transition': '0s'
		});
	}
}

// 触摸移动
var touchmove = function(e, ins) {
	var state = getRefreshState(ins);
	
	// 检查是否可以刷新
	if (!state.currentReadyRefresh || state.refreshStatus === 3) return;
	
	var refreshContainer = ins.selectComponent('#refresh-container');
	var moveY = e.touches[0].pageY;
	var diffY = Math.max(0, (moveY - state.startY) * 0.5);
	
	// 更新状态
	if (diffY > 0) {
		if (!state.readyRefresh) {
			ins.callMethod('setReadyRefresh', { readyRefresh: true });
			state.readyRefresh = true;
		}
		if (!state.refreshShow) {
			ins.callMethod('setRefreshShow', { refreshShow: true });
			state.refreshShow = true;
		}
	}
	
	// 设置变换 - 移动整个容器
	refreshContainer.setStyle({
		'transform': 'translateY(' + diffY + 'px)'
	});
	
	// 控制刷新指示器的显示 - 计算指示器的显示程度
	var refreshIndicator = ins.selectComponent('.refresh-indicator');
	if (refreshIndicator) {
		var showPercent = Math.min(diffY / state.refreshDistance, 1);
		var translateY = -100 + (showPercent * 100);
		refreshIndicator.setStyle({
			'transform': 'translateY(' + translateY + '%)'
		});
	}
	
	// 更新刷新状态
	var newStatus = diffY >= state.refreshDistance ? 2 : 1;
	if (state.refreshStatus !== newStatus) {
		ins.callMethod('setRefreshStatus', newStatus);
		state.refreshStatus = newStatus;
	}
}

// 触摸结束
var touchend = function(e, ins) {
	var state = getRefreshState(ins);
	
	// 检查是否可以刷新
	if (!state.currentReadyRefresh) return;
	
	var refreshContainer = ins.selectComponent('#refresh-container');
	
	// 重置准备状态
	ins.callMethod('setReadyRefresh', { readyRefresh: false });
	state.readyRefresh = false;
	
	// 根据状态决定是否触发刷新
	if (state.refreshStatus === 2) {
		// 触发刷新
		ins.callMethod('setRefreshStatus', 3);
		state.refreshStatus = 3;
		
		refreshContainer.setStyle({
			'transform': 'translateY(' + state.refreshDistance + 'px)',
			'transition': '.3s'
		});
	} else {
		// 回弹
		refreshContainer.setStyle({
			'transform': 'translateY(0)',
			'transition': '.3s'
		});
		
		// 隐藏刷新指示器
		var refreshIndicator = ins.selectComponent('.refresh-indicator');
		if (refreshIndicator) {
			refreshIndicator.setStyle({
				'transform': 'translateY(-100%)',
				'transition': '.3s'
			});
		}
		
		ins.callMethod('setRefreshShow', { refreshShow: false });
		state.refreshShow = false;
	}
}

// 刷新状态变化
var refreshStatusChange = function(n, o, ins) {
	var state = getRefreshState(ins);
	state.refreshStatus = n;
	
	// 刷新完成后的处理
	if (n === 4 || n === 5) {
		var refreshContainer = ins.selectComponent('#refresh-container');
		var refreshIndicator = ins.selectComponent('.refresh-indicator');
		
		refreshContainer.setStyle({
			'transform': 'translateY(0)',
			'transition': '.3s 1s'
		});
		
		// 隐藏刷新指示器
		if (refreshIndicator) {
			refreshIndicator.setStyle({
				'transform': 'translateY(-100%)',
				'transition': '.3s 1s'
			});
		}
		
		// 延迟重置状态
		setTimeout(function() {
			ins.callMethod('setRefreshStatus', 6);
		}, 500);
	}
}

// 刷新显示状态变化
var refreshShowChange = function(n, o, ins) {
	var state = getRefreshState(ins);
	state.refreshShow = n;
}

// 准备刷新状态变化
var readyRefreshChange = function(n, o, ins) {
	var state = getRefreshState(ins);
	state.readyRefresh = n;
}

// 刷新距离变化
var refreshDistanceChange = function(n, o, ins) {
	var state = getRefreshState(ins);
	state.refreshDistance = n;
}

// 当前准备刷新状态变化
var curReadyRefreshChange = function(n, o, ins) {
	var state = getRefreshState(ins);
	state.currentReadyRefresh = n;
}

// 导出模块
module.exports = {
	touchstart: touchstart,
	touchmove: touchmove,
	touchend: touchend,
	refreshStatusChange: refreshStatusChange,
	refreshShowChange: refreshShowChange,
	readyRefreshChange: readyRefreshChange,
	refreshDistanceChange: refreshDistanceChange,
	curReadyRefreshChange: curReadyRefreshChange
} 